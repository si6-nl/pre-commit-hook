#!/bin/sh

PROJECT=`php -r "echo dirname(dirname(dirname(realpath('$0'))));"`
STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
    oIFS=$IFS
    IFS='
    '
    SFILES="$1"
    IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}

echo "Checking PHP Lint..."
for FILE in $SFILES
do
    php -l -d display_errors=0 $PROJECT/$FILE
    if [ $? != 0 ]
    then
        echo "Fix the error before commit."
        exit 1
    fi
    FILES="$FILES $PROJECT/$FILE"
done

if [ "$FILES" != "" ]
then
    echo "Running Code Sniffer. Code standard PSR12."
    ./vendor/bin/phpcs --standard=ruleset.xml --colors --encoding=utf-8 -n -p $FILES
    if [ $? != 0 ]
    then
        echo "Fix the error before commit!"
        echo "Run"
        echo "  ./vendor/bin/phpcbf --standard=ruleset.xml $FILES"
        echo "for automatic fix or fix it manually."
        exit 1
    fi
fi

exec < /dev/tty

echo "Updating base si6"
composer update si6/base-rest-framework
rc=$?
if [[ $rc != 0 ]] ; then
  echo "Composer update error"
  exit $rc;
fi
./vendor/bin/phpunit --colors -c $(echo $PWD)/phpunit.xml --testdox
#Get the last processes exit code
rc=$?
if [[ $rc != 0 ]] ; then
    echo -n "It looks like some of your tests failed. Would you like to see a more detailed test output? (y/n) "
    read YN
    if [ -z "$YN" ]; then
        exit $rc;
    elif [ "$YN" != "y" ]; then
        exit $rc;
    fi
    ./vendor/bin/phpunit --colors -c $(echo $PWD)/phpunit.xml --verbose
fi

exit $rc;

exit $?